// Copyright 2015, Google Inc.
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//     * Neither the name of Google Inc. nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

syntax = "proto3";

package communicator;

option java_multiple_files = true;
option java_package = "org.sjsu.grpcCommunicator";
option java_outer_classname = "CommunicatorProto";

// The greeting service definition.
service Communicator {
  // Sends a greeting
  //rpc SayHello (HelloRequest) returns (HelloResponse) {}

  rpc Size (MySize) returns (AccomodateChild){}

  rpc JoinCluster(JoinClusterRequest) returns (JoinClusterResponse) {}

  rpc Jam (JamRequest) returns (JamResponse){}

  rpc ShiftNodeRequest (ShiftRequest) returns (ShiftResponse){}

  rpc ShiftClusterRequest(ShiftClusterReq) returns (ShiftClusterRes){}

  rpc Hello(SendHello) returns (SendHelloResponse){}

  rpc Accept(AcceptRequest) returns(AcceptResponse){}

  rpc Reject(RejectRequest) returns(RejectResponse){}

  rpc WakeUp (wakeUpRequest) returns (wakeUpResponse){}

  rpc JoinNewParent( JoinNewParentRequest) returns (JoinNewParentResponse){}

  rpc UpdateSize(UpdateSizeRequest) returns ( UpdateSizeResponse) {}

  rpc ShiftStart (ShiftStartRequest) returns (ShiftStartResponse){}

  rpc ShiftFinished(ShiftFinishedRequest) returns (ShiftFinishedResponse){}

  rpc UpdateClusterhead (UpdateClusterheadRequest) returns (UpdateClusterheadResponse){}

  rpc ShiftComplete(SendShiftCompleteAck) returns (ClusterheadAckSendShift){}

  rpc RemoveChildIdFromParent(RemoveChildIdFromParentRequest) returns (RemoveChildIdFromParentResponse){}

  rpc StartPhase2Clustering(StartPhase2ClusteringRequest) returns (StartedPhase2ClusteringResponse){}

  rpc CheckEnergyDrain(CheckEnergyDrainRequest) returns (CheckEnergyDrainResponse){}

}

// The request message containing the user's name.
//message HelloRequest {
//  string name = 1;
//}
// The response message containing the greetings
//message HelloResponse {
//  string message = 1;
//}

message AccomodateChild{
  string message = 1;
}

message MySize{
  int32 size = 1;
  string nodeId = 2;
}


message JoinClusterResponse{
    string joinClusterResponse = 1;
}
message JoinClusterRequest{
    string clusterHeadName = 1;
    int32 hopcount = 2;

}

message JamResponse{
    string jamResponse = 1;
}
message JamRequest{
    string nodeId = 1;

}

message ShiftResponse{
  string message = 1;
}
message ShiftRequest{
  string nodeId = 1;
  int32 sumOfweight = 2;
  string clusterHeadId = 3;
}


message ShiftClusterRes{
  string message = 1;

}
message ShiftClusterReq{
  string senderClusterHeadId = 1;
  string senderNodeId = 2;
  int32 sumOfweights = 3;
}

message SendHello{
    string senderId = 1;
    int32 hopToSenderClusterhead = 2;
    string senderState = 3;
    string senderClusterheadId = 4;
}

message SendHelloResponse{
    int32 interested =1;
}

message AcceptRequest{
  string clusterHeadId = 1;
}

message AcceptResponse{
  string message = 1;
}

message RejectResponse{
  string message = 1;
}

message RejectRequest{
  string clusterHeadId = 1;
}


message JoinNewParentResponse{
    string joinResponse = 1;
}

message JoinNewParentRequest{
    int32 childSize = 1;
    string nodeId = 2;
}


message WakeUpRequest {
    string wakeUp = 1;
}

message WakeUpResponse{
    string wokenUp = 1;
}


message ShiftStartRequest{
    string targetNodeId = 1;
}

message ShiftStartResponse{
    string shiftStartResponse = 1;
}

message ShiftFinishedRequest{
  string clusterHeadId = 1;
}

message ShiftFinishedResponse{
  string message = 1;
}


message UpdateSizeResponse{
    string updateSizeResponse = 1;
}

message UpdateSizeRequest{
    int32 sizeIncrement = 1;
}

message UpdateClusterheadRequest{
    string newClusterheadId = 1;
}

message UpdateClusterheadResponse{
    string updateClusterheadResponse = 1;

}

message SendShiftCompleteAck{
    string id = 1;
    string sendShiftCompleteAck = 2;
}

message ClusterheadAckSendShift{
    string clusterheadAckSendShift = 1;
}

message RemoveChildIdFromParentRequest{
    string departingChildId = 1;
}

message RemoveChildIdFromParentResponse{
    string removeChildIdFromParentResponse = 1;
}

message StartPhase2ClusteringRequest{
    string startPhase2 = 1;
}

message StartedPhase2ClusteringResponse{
    string startedPhase2ClusteringResponse =1;
}

message CheckEnergyDrainRequest{
    string checkEnergyDrainRequest = 1;
}

message CheckEnergyDrainResponse{
    int32 checkEnergyDrainResponse = 1;
}

